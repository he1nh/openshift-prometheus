apiVersion: v1
items:
- apiVersion: v1
  kind: Secret
  metadata:
    name: haproxy-secret
    labels:
      app: 'exporter'
  type: Opaque
  data:
    username: YWRtaW4=
    password:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: exporter
    name: exporter
  spec:
    replicas: 1
    selector:
      app: exporter
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: exporter
      spec:
        containers:
        - args:
          - -haproxy.scrape-uri=http://$(USERNAME):$(PASSWORD)@router:1936/haproxy?stats;csv
          image: prom/haproxy-exporter
          imagePullPolicy: Always
          name: exporter
          ports:
          - containerPort: 9101
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          env:
            - name: USERNAME
              valueFrom:
                secretKeyRef:
                  name: haproxy-secret
                  key: username
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: haproxy-secret
                  key: password
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
  status:
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: exporter
    name: exporter
  spec:
    ports:
    - port: 9101
      protocol: TCP
      targetPort: 9101
    selector:
      app: exporter
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: null
    name: prometheus
    labels:
      app: 'prometheus'
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 3
    labels:
      app: prometheus
    name: prometheus
  spec:
    replicas: 1
    selector:
      app: prometheus
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
      spec:
        containers:
        - image: prom/prometheus:v1.4.1
          imagePullPolicy: IfNotPresent
          name: prometheus
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /etc/prometheus
            name: config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        serviceAccount: prometheus
        serviceAccountName: prometheus
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            items:
            - key: prometheus.yml
              path: prometheus.yml
            name: prometheus-config
          name: config
    test: false
    triggers:
    - type: ConfigChange
  status:
    availableReplicas: 1
    observedGeneration: 3
    replicas: 1
    updatedReplicas: 1
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: prometheus
    name: prometheus
  spec:
    ports:
    - port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      app: prometheus
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: prometheus
    name: prometheus
  spec:
    port:
      targetPort: 9090
    to:
      kind: Service
      name: prometheus
      weight: 100
- apiVersion: v1
  kind: ConfigMap
  data:
    prometheus.yml: |
      global:
        scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
        evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
        scrape_timeout: 10s      # equals global default
  
        # Attach these labels to any time series or alerts when communicating with
        # external systems (federation, remote storage, Alertmanager).
        external_labels:
            monitor: 'codelab-monitor'
  
      scrape_configs:
      # scrape config for Prometheus itself.
      - job_name: 'prometheus'
        metrics_path: '/metrics'
        scheme: http
        static_configs:
          - targets: ['localhost:9090']
  
      # Scrape config for kubernetes API servers.
      #
      # Kubernetes exposes API servers as endpoints to the default/kubernetes
      # service so this uses `endpoints` role and uses relabelling to only keep
      # the endpoints associated with the default/kubernetes service using the
      # default named port `https`. This works for single API server deployments as
      # well as HA API server deployments.
      - job_name: 'kubernetes-apiservers'
        scheme: https
  
        kubernetes_sd_configs:
        - role: endpoints
  
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  
        # Keep only the default/kubernetes service endpoints for the https port. This
        # will add targets for each API server which Kubernetes adds an endpoint to
        # the default/kubernetes service.
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
  
      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  
        kubernetes_sd_configs:
        - role: node
  
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
  
      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
      - job_name: 'kubernetes-service-endpoints'
  
        kubernetes_sd_configs:
        - role: endpoints
  
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: (.+)(?::\d+);(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
  
      # Example scrape config for probing services via the Blackbox Exporter.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/probe`: Only probe services that have a value of `true`
      - job_name: 'kubernetes-services'
  
        metrics_path: /probe
        params:
          module: [http_2xx]
  
        kubernetes_sd_configs:
        - role: service
  
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
          action: keep
          regex: true
        - source_labels: [__address__]
          target_label: __param_target
        - target_label: __address__
          replacement: blackbox
        - source_labels: [__param_target]
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_service_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name
  
      # Example scrape config for pods
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      - job_name: 'kubernetes-pods'
  
        kubernetes_sd_configs:
        - role: pod
  
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: (.+):(?:\d+);(\d+)
          replacement: ${1}:${2}
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
  
      # scrape config for haproxy-exporter
      - job_name: 'haproxy-scrape'
        metrics_path: '/metrics'
        scheme: http
        static_configs:
          - targets: ['exporter:9101']
  metadata:
    creationTimestamp: null
    name: prometheus-config
    labels:
      app: 'prometheus'
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: null
    name: grafana
    labels:
      app: 'grafana'
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: grafana
    name: grafana
  spec:
    replicas: 1
    selector:
      app: grafana
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: grafana
      spec:
        containers:
        - image: grafana/grafana:4.1.1
          imagePullPolicy: IfNotPresent
          name: grafana
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        serviceAccountName: 'grafana'
    test: false
    triggers:
    - type: ConfigChange
  status:
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: grafana
    name: grafana
  spec:
    ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: grafana
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: grafana
    name: grafana
  spec:
    port:
      targetPort: 3000
    to:
      kind: Service
      name: grafana
      weight: 100
kind: List
metadata: {}
